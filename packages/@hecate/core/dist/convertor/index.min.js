var convertor = (function (t) {
    'use strict';
    class e {
        static get selfCloseTags() {
            return [
                'area',
                'base',
                'br',
                'col',
                'embed',
                'hr',
                'img',
                'input',
                'link',
                'meta',
                'param',
                'source',
                'track',
                'wbr',
                'command',
                'keygen',
                'menuitem',
            ];
        }
        static build(t) {
            if (!t || !t.tag) return '';
            const e = r.attributes(t);
            if (r.isSelfCloseTag(t)) return `<${t.tag} ${e}/>`;
            const n = r.children(t);
            return `<${t.tag} ${e}>${n}</${t.tag}>`;
        }
        static unbuild(t) {
            if (!t) return {};
            const e = document.createElement('html');
            e.innerHTML = t;
            const r = e.querySelector('body');
            if (!r) return {};
            const [s] = r.children;
            return s ? n.node2json(s) : {};
        }
    }
    class r {
        static attributes(t) {
            if (!t.attributes) return '';
            let e = '';
            const r = Object.keys(t.attributes);
            for (const n in r) ({}.hasOwnProperty.call(r, n) && (e += ` ${r[n]}="${t.attributes[r[n]]}"`));
            return e;
        }
        static children(t) {
            if (!t.children) return '';
            let r = '';
            for (const n in t.children)
                ({}.hasOwnProperty.call(t.children, n) &&
                    ('object' == typeof t.children[n] ? (r += e.build(t.children[n])) : (r += t.children[n])));
            return r;
        }
        static isSelfCloseTag(t) {
            return e.selfCloseTags.indexOf(t.tag) > -1;
        }
    }
    class n {
        static attributes(t) {
            const e = {},
                r = Object.keys(t.attributes);
            for (const n in r)
                if ({}.hasOwnProperty.call(r, n)) {
                    const s = r[n],
                        i = t.attributes[s];
                    e[i.name] = i.value;
                }
            return e;
        }
        static children(t) {
            const e = [];
            for (const r in t.childNodes)
                t.childNodes[r].nodeType === Node.ELEMENT_NODE && e.push(n.node2json(t.childNodes[r])),
                    t.childNodes[r].nodeType === Node.TEXT_NODE && e.push(t.childNodes[r].textContent);
            return e;
        }
        static node2json(t) {
            return { tag: t.tagName.toLowerCase(), attributes: n.attributes(t), children: n.children(t) };
        }
    }
    const s = e;
    return (t.json2html = s), Object.defineProperty(t, '__esModule', { value: !0 }), t;
})({});
